name: Test and Coverage Report

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # Django settings
  SECRET_KEY: 'test-secret-key-for-ci'
  DEBUG: 'False'
  DATABASE_URL: 'sqlite:///test.db'
  ALLOWED_HOSTS: 'localhost,127.0.0.1'

jobs:
  test-backend:
    runs-on: ubuntu-latest
    name: Django Backend Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Django migrations
      run: python manage.py migrate
      env:
        DJANGO_SETTINGS_MODULE: config.settings
    
    - name: Run Django tests with coverage
      run: pytest --cov=family --cov=api --cov-report=html:htmlcov-backend --cov-report=xml:coverage-backend.xml --cov-report=term-missing --cov-fail-under=50
      env:
        DJANGO_SETTINGS_MODULE: config.settings
      continue-on-error: true
    
    - name: Upload backend coverage to artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-backend
        path: |
          htmlcov-backend/
          coverage-backend.xml

  test-frontend:
    runs-on: ubuntu-latest
    name: React Frontend Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint
    
    - name: Run frontend tests with coverage
      working-directory: ./frontend
      run: npm run test:coverage
      continue-on-error: true
    
    - name: Upload frontend coverage to artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-frontend
        path: frontend/coverage/
        if-no-files-found: warn

  generate-coverage-report:
    runs-on: ubuntu-latest
    name: Generate Combined Coverage Report
    needs: [test-backend, test-frontend]
    if: always() && (needs.test-backend.result == 'success' || needs.test-frontend.result == 'success')
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download backend coverage
      uses: actions/download-artifact@v4
      with:
        name: coverage-backend
        path: ./coverage-reports/backend/
      continue-on-error: true
    
    - name: Download frontend coverage
      uses: actions/download-artifact@v4
      with:
        name: coverage-frontend
        path: ./coverage-reports/frontend/
      continue-on-error: true
    
    - name: Create coverage dashboard
      run: |
        mkdir -p coverage-dashboard
        
        # Extract backend coverage percentage
        BACKEND_COVERAGE="Unknown"
        if [ -f "./coverage-reports/backend/coverage-backend.xml" ]; then
          BACKEND_COVERAGE=$(grep -o 'line-rate="[0-9.]*"' ./coverage-reports/backend/coverage-backend.xml | head -1 | sed 's/line-rate="//;s/"//' | awk '{printf "%.0f%%", $1*100}')
        fi
        
        # Extract frontend coverage percentage  
        FRONTEND_COVERAGE="Unknown"
        
        # Debug: Check what files exist in frontend coverage directory
        echo "=== Frontend coverage files ==="
        ls -la ./coverage-reports/frontend/ || echo "Frontend directory not found"
        find ./coverage-reports/frontend/ -name "*.json" || echo "No JSON files found"
        
        if [ -f "./coverage-reports/frontend/coverage-final.json" ]; then
          echo "Found coverage-final.json"
          echo "=== JSON content structure ==="
          python3 -c "import json; data=json.load(open('./coverage-reports/frontend/coverage-final.json')); print('Keys:', list(data.keys())); print('Total keys:', list(data.get('total', {}).keys()) if 'total' in data else 'No total key')"
          FRONTEND_COVERAGE=$(python3 -c "
import json
data = json.load(open('./coverage-reports/frontend/coverage-final.json'))
if 'total' in data and 'lines' in data['total'] and 'pct' in data['total']['lines']:
    print(f\"{data['total']['lines']['pct']:.0f}%\")
else:
    # Try alternative structure
    for key in data:
        if isinstance(data[key], dict) and 'lines' in data[key]:
            if 'pct' in data[key]['lines']:
                print(f\"{data[key]['lines']['pct']:.0f}%\")
                break
    else:
        print('Unknown')
" || echo "Unknown")
        else
          echo "coverage-final.json not found, checking other JSON files..."
          # Try alternative paths that vitest might use
          for json_file in ./coverage-reports/frontend/*.json ./coverage-reports/frontend/**/coverage-final.json; do
            if [ -f "$json_file" ]; then
              echo "Trying: $json_file"
              FRONTEND_COVERAGE=$(python3 -c "import json; data=json.load(open('$json_file')); print(f\"{data['total']['lines']['pct']:.0f}%\")" 2>/dev/null || echo "Unknown")
              [ "$FRONTEND_COVERAGE" != "Unknown" ] && break
            fi
          done
        fi
        
        # Determine status icons
        BACKEND_STATUS="❌"
        FRONTEND_STATUS="❌"
        
        if [[ "$BACKEND_COVERAGE" =~ ^[0-9]+% ]]; then
          BACKEND_PCT=$(echo "$BACKEND_COVERAGE" | sed 's/%//')
          [ "$BACKEND_PCT" -ge 80 ] && BACKEND_STATUS="✅"
        fi
        
        if [[ "$FRONTEND_COVERAGE" =~ ^[0-9]+% ]]; then
          FRONTEND_PCT=$(echo "$FRONTEND_COVERAGE" | sed 's/%//')
          [ "$FRONTEND_PCT" -ge 90 ] && FRONTEND_STATUS="✅"
        fi
        
        # Create main index.html with real data
        cat > coverage-dashboard/index.html << EOF
        <!DOCTYPE html>
        <html lang="zh-CN">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>代码覆盖率报告 - 家庭知识管理系统</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
                .container { max-width: 1200px; margin: 0 auto; }
                .header { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin-bottom: 20px; text-align: center; }
                .cards { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 20px; }
                .card { background: white; padding: 25px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); text-align: center; }
                .card h3 { margin-top: 0; color: #333; font-size: 1.2em; }
                .button { display: inline-block; padding: 12px 24px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; margin: 10px 5px; transition: background 0.3s; }
                .button:hover { background: #0056b3; }
                .button.secondary { background: #6c757d; }
                .button.secondary:hover { background: #545b62; }
                .stats { display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px; margin: 15px 0; }
                .stat { text-align: center; padding: 15px; background: #f8f9fa; border-radius: 5px; }
                .stat-value { font-size: 2em; font-weight: bold; color: #28a745; }
                .stat-label { color: #666; margin-top: 5px; }
                .footer { text-align: center; margin-top: 40px; color: #666; font-size: 0.9em; }
                .timestamp { color: #999; font-size: 0.8em; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>🏠 家庭知识管理系统</h1>
                    <h2>代码覆盖率报告</h2>
                    <p class="timestamp">生成时间: $(date '+%Y-%m-%d %H:%M:%S') UTC</p>
                </div>
                
                <div class="cards">
                    <div class="card">
                        <h3>🐍 Django 后端覆盖率</h3>
                        <div class="stats">
                            <div class="stat">
                                <div class="stat-value">$BACKEND_COVERAGE</div>
                                <div class="stat-label">实际覆盖率</div>
                            </div>
                            <div class="stat">
                                <div class="stat-value">$BACKEND_STATUS</div>
                                <div class="stat-label">测试状态</div>
                            </div>
                        </div>
                        <a href="./backend/index.html" class="button">查看详细报告</a>
                        <p>包含模型、视图、API端点的完整测试覆盖率分析</p>
                    </div>
                    
                    <div class="card">
                        <h3>⚛️ React 前端覆盖率</h3>
                        <div class="stats">
                            <div class="stat">
                                <div class="stat-value">$FRONTEND_COVERAGE</div>
                                <div class="stat-label">实际覆盖率</div>
                            </div>
                            <div class="stat">
                                <div class="stat-value">$FRONTEND_STATUS</div>
                                <div class="stat-label">测试状态</div>
                            </div>
                        </div>
                        <a href="./frontend/index.html" class="button">查看详细报告</a>
                        <p>包含组件、hooks、工具函数的完整测试覆盖率分析</p>
                    </div>
                </div>
                
                <div class="card">
                    <h3>📊 测试指标总览</h3>
                    <div class="stats">
                        <div class="stat">
                            <div class="stat-value">Django</div>
                            <div class="stat-label">后端框架</div>
                        </div>
                        <div class="stat">
                            <div class="stat-value">React</div>
                            <div class="stat-label">前端框架</div>
                        </div>
                        <div class="stat">
                            <div class="stat-value">Pytest</div>
                            <div class="stat-label">后端测试</div>
                        </div>
                        <div class="stat">
                            <div class="stat-value">Vitest</div>
                            <div class="stat-label">前端测试</div>
                        </div>
                    </div>
                    
                    <h4>🔗 相关链接</h4>
                    <a href="https://github.com/${{ github.repository }}" class="button secondary">项目仓库</a>
                    <a href="https://github.com/${{ github.repository }}/actions" class="button secondary">CI/CD 流水线</a>
                </div>
                
                <div class="footer">
                    <p>🚀 由 GitHub Actions 自动生成 | 📝 使用 pytest-cov 和 vitest coverage</p>
                    <p>最后更新: ${{ github.sha }} | 分支: ${{ github.ref_name }}</p>
                </div>
            </div>
        </body>
        </html>
        EOF
        
        # Copy coverage reports if they exist
        if [ -d "./coverage-reports/backend/htmlcov-backend" ]; then
          cp -r ./coverage-reports/backend/htmlcov-backend coverage-dashboard/backend
        fi
        
        if [ -d "./coverage-reports/frontend" ]; then
          cp -r ./coverage-reports/frontend coverage-dashboard/frontend
        fi
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
      if: github.ref == 'refs/heads/main'
    
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      if: github.ref == 'refs/heads/main'
      with:
        path: ./coverage-dashboard
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      if: github.ref == 'refs/heads/main'

  comment-pr:
    runs-on: ubuntu-latest
    name: Comment PR with test results
    needs: [test-backend, test-frontend, generate-coverage-report]
    if: github.event_name == 'pull_request' && always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download backend coverage
      uses: actions/download-artifact@v4
      with:
        name: coverage-backend
        path: ./coverage-backend/
      continue-on-error: true
    
    - name: Download frontend coverage
      uses: actions/download-artifact@v4
      with:
        name: coverage-frontend
        path: ./coverage-frontend/
      continue-on-error: true
    
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## 🧪 测试结果\n\n';
          
          // Backend results
          if ('${{ needs.test-backend.result }}' === 'success') {
            comment += '✅ **Django 后端测试**: 通过\n';
          } else {
            comment += '❌ **Django 后端测试**: 失败\n';
          }
          
          // Frontend results  
          if ('${{ needs.test-frontend.result }}' === 'success') {
            comment += '✅ **React 前端测试**: 通过\n';
          } else {
            comment += '❌ **React 前端测试**: 失败\n';
          }
          
          comment += '\n## 📊 代码覆盖率\n\n';
          comment += '详细覆盖率报告将在合并到主分支后可在 [dev.llbrother.org](https://dev.llbrother.org) 查看。\n\n';
          
          comment += '## 🔗 相关链接\n\n';
          comment += `- [🏃 查看完整的工作流程](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
          comment += `- [📝 代码覆盖率仪表板](https://dev.llbrother.org)\n`;
          comment += `- [🐍 Django 后端覆盖率](https://dev.llbrother.org/backend/index.html)\n`;
          comment += `- [⚛️ React 前端覆盖率](https://dev.llbrother.org/frontend/index.html)\n`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });